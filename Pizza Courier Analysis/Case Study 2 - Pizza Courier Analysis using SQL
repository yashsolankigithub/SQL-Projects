USE dannys;
CREATE SCHEMA pizza_runner;

CREATE TABLE pizza_runner.runners (
runner_id INT PRIMARY KEY,
registration_date date);

insert into pizza_runner.runners 
(runner_id,registration_date) values
(1,	'2021-01-01'),
(2,	'2021-01-03'),
(3,	'2021-01-08'),
(4,	'2021-01-15');

CREATE TABLE pizza_runner.customer_orders(
order_id INT,
customer_id INT,
pizza_id INT,
exclusions VARCHAR(10),
extras VARCHAR(10),
order_time timestamp,
FOREIGN KEY (order_id) REFERENCES pizza_runner.runner_orders (order_id),
FOREIGN KEY (pizza_id) REFERENCES pizza_runner.pizza_names (pizza_id),
FOREIGN KEY (pizza_id) REFERENCES pizza_runner.pizza_recipes (pizza_id));

insert into pizza_runner.customer_orders 
(order_id,customer_id,pizza_id,exclusions,extras,order_time) values 
(1,	101,	1,	'', 	'', 	'2021-01-01 18:05:02'),
(2,	101,	1,	'', 	'', 	'2021-01-01 19:00:52'),
(3,	102,	1,	'', 	'', 	'2021-01-02 23:51:23'),
(3,	102,	2,	'', 	'NaN',	'2021-01-02 23:51:23'),
(4,	103,	1,	4,	 	'',     '2021-01-04 13:23:46'),
(4,	103,	1,	4,	 	'',     '2021-01-04 13:23:46'),
(4,	103,	2,	4,	 	'',     '2021-01-04 13:23:46'),
(5,	104,	1,  'null',	1,	    '2021-01-08 21:00:29'),
(6,	101,	2,	'null',	'null',	'2021-01-08 21:03:13'),
(7,	105,	2,	'null',	1,	    '2021-01-08 21:20:29'),
(8,	102,	1,	'null',	'null',	'2021-01-09 23:54:33'),
(9,	103,	1,	4,	   '1, 5',	'2021-01-10 11:22:59'),
(10,104,	1,	'null',	'null',	'2021-01-11 18:34:49'),
(10,104,	1,	'2, 6','1, 4',	'2021-01-11 18:34:49');

CREATE TABLE pizza_runner.runner_orders(
order_id INT PRIMARY KEY,
runner_id INT,
pickup_time VARCHAR(20),
distance VARCHAR(10),
duration VARCHAR(10),
cancellat VARCHAR(25),
FOREIGN KEY(runner_id) REFERENCES pizza_runner.runners(runner_id));

insert into pizza_runner.runner_orders 
(order_id,runner_id,pickup_time,distance,duration,cancellat) values 
(1,	1,	'2021-01-01 18:15:34',	'20km',	  '32 minutes',      ''),	 
(2,	1,	'2021-01-01 19:10:54',	'20km',	  '27 minutes',      ''),	 
(3,	1,	'2021-01-03 00:12:37',	'13.4km', '20 mins',	     'NaN'),
(4,	2,	'2021-01-04 13:53:03',	'23.4',	  '40',	             'NaN'),
(5,	3,	'2021-01-08 21:10:57',	'10',	  '15',	             'NaN'),
(6,	3,	'null',             	'null',	  'null',	         'Restaurant Cancellation'),
(7,	2,	'2020-01-08 21:30:45',	'25km',	  '25mins',	         'null'),
(8,	2,	'2020-01-10 00:15:02',	'23.4 km','15 minute',	     'null'),
(9,	2,	'null',              	'null',	  'null',            'Customer Cancellation'),
(10,1,	'2020-01-11 18:50:20',	'10km',	  '10minutes',	     'null');

CREATE TABLE pizza_runner.pizza_names(
pizza_id INT PRIMARY KEY,
pizza_name VARCHAR(20));

insert into pizza_runner.pizza_names 
(pizza_id,pizza_name) values 
(1,	'Meat Lovers'),
(2,	'Vegetarian');

CREATE TABLE pizza_runner.pizza_recipes(
pizza_id int PRIMARY KEY,
toppings VARCHAR(30));

insert into pizza_runner.pizza_recipes 
(pizza_id,toppings) values 
(1,	'1, 2, 3, 4, 5, 6, 8, 10'),
(2,	'4, 6, 7, 9, 11, 12');

CREATE TABLE pizza_runner.pizza_toppings(
topping_id INT,
topping_name VARCHAR(20));

insert into pizza_runner.pizza_toppings
(topping_id,topping_name) values 
(1,	'Bacon'),
(2,	'BBQ Sauce'),
(3,	'Beef'),
(4,	'Cheese'),
(5,	'Chicken'),
(6,	'Mushrooms'),
(7,	'Onions'),
(8,	'Pepperoni'),
(9,	'Peppers'),
(10, 'Salami'),
(11, 'Tomatoes'),
(12, 'Tomato Sauce');

-----------------------------------------------
SELECT * FROM pizza_runner.runners;
SELECT * FROM pizza_runner.customer_orders;
SELECT * FROM pizza_runner.runner_orders;
SELECT * FROM pizza_runner.pizza_names;
SELECT * FROM pizza_runner.pizza_recipes;
SELECT * FROM pizza_runner.pizza_toppings;
------------------------------------------------

/*
Section A. Pizza Metrics
1.How many pizzas were ordered?
2.How many unique customer orders were made?
3.How many successful orders were delivered by each runner?
4.How many of each type of pizza was delivered?
5.How many Vegetarian and Meatlovers were ordered by each customer?
6.What was the maximum number of pizzas delivered in a single order?
7.For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
8.How many pizzas were delivered that had both exclusions and extras?
9.What was the total volume of pizzas ordered for each hour of the day?
10.What was the volume of orders for each day of the week?
*/

/*
How many pizzas were ordered? Ans 14 Orders
*/
SELECT * FROM pizza_runner.customer_orders;
SELECT count(*) FROM pizza_runner.customer_orders;

/*
2.How many unique customer orders were made? Ans 10 Unique Customers
*/
SELECT * FROM pizza_runner.customer_orders;
SELECT COUNT(*) FROM pizza_runner.customer_orders;
SELECT COUNT(distinct order_id) FROM pizza_runner.customer_orders;

/*
3.How many successful orders were delivered by each runner? Ans 12 successful orders were delivered by each runner.
*/

SELECT * FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.runner_orders as RO
ON CO.order_id = RO.order_id
where duration <>'null';

/*OR*/

SELECT * FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.runner_orders as RO
ON CO.order_id = RO.order_id
where pickup_time <> 'null';

SELECT RO.runner_id,count(distinct CO.order_id) as delivered_orders FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.runner_orders as RO
ON CO.order_id = RO.order_id
where pickup_time <> 'null'
group by RO.runner_id;

/*OR*/

-- without join operation

SELECT runner_id,count(distinct RO.order_id) as delivered_orders FROM pizza_runner.runner_orders as RO 
#pizza_runner.customer_orders as CO
#INNER JOIN pizza_runner.runner_orders as RO
#CO.order_id = RO.order_id
where pickup_time <> 'null'
group by RO.runner_id;

/*
4.How many of each type of pizza was delivered?
*/

SELECT 
PN.pizza_name,
count(PN.pizza_id) as pizzas_delivered
FROM pizza_runner.runner_orders as RO
INNER JOIN pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.pizza_names as PN
ON CO.pizza_id = PN.pizza_id
ON RO.order_id = CO.order_id
where pickup_time <> 'null'
group by PN.pizza_name;


/*
5.How many Vegetarian and Meatlovers were ordered by each customer?
*/

SELECT
CO.customer_id,
PN.pizza_name,
count(CO.pizza_id) as pizzas_ordered
FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.pizza_names as PN
ON CO.pizza_id = PN.pizza_id
group by PN.pizza_name,CO.customer_id;

/*
6.What was the maximum number of pizzas delivered in a single order?

maximum number,pizzas delivered,order
*/

SELECT * FROM pizza_runner.runner_orders;

SELECT
CO.order_id,
count(CO.pizza_id) as pizzas_ordered
FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.runner_orders as RO
ON CO.order_id = RO.order_id
where pickup_time <> 'null'
group by CO.order_id
order by count(pizza_id) DESC
LIMIT 1;   


/*
7.For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

customer,delivered
*/

SELECT* FROM pizza_runner.customer_orders;


SELECT 
CO.order_id,
exclusions,
extras,
exclusions <> 'null' OR length(exclusions) > 0,
exclusions <> 'null' AND length(exclusions) > 0,
(exclusions is not null <> 'null' AND length(exclusions) > 0) OR (extras is not null <> 'null' AND length(extras) > 0) as changes
FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.runner_orders as RO
ON CO.order_id = RO.order_id
where pickup_time <> 'null';

# final below

SELECT 
CO.customer_id,
SUM(CASE
	WHEN (
			(exclusions is not null <> 'null' AND length(exclusions) > 0) 
			OR (extras is not null <> 'null' AND length(extras) > 0)
            ) = TRUE
THEN 1 
ELSE 0 
END) as changes,
SUM(CASE
	WHEN (
			(exclusions is not null <> 'null' AND length(exclusions) > 0) 
			OR (extras is not null <> 'null' AND length(extras) > 0)
            ) = TRUE
THEN 0 
ELSE 1 
END) as no_changes
#count(pizza_id)
FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.runner_orders as RO
ON CO.order_id = RO.order_id
WHERE pickup_time <> 'null'
GROUP BY CO.customer_id;


SELECT 
  customer_id, 
  SUM(CASE 
    WHEN 
        (
          (exclusions IS NOT NULL AND exclusions<>'null' AND LENGTH(exclusions)>0) 
        AND (extras IS NOT NULL AND extras<>'null' AND LENGTH(extras)>0)
        )=TRUE
    THEN 1 
    ELSE 0
  END) as changes, 
  SUM(CASE 
    WHEN 
        (
          (exclusions IS NOT NULL AND exclusions<>'null' AND LENGTH(exclusions)>0) 
        AND (extras IS NOT NULL AND extras<>'null' AND LENGTH(extras)>0)
        )=TRUE
    THEN 0 
    ELSE 1
  END) as no_changes 
FROM 
  pizza_runner.customer_orders as co 
  INNER JOIN pizza_runner.runner_orders as ro on ro.order_id = co.order_id 
WHERE 
  pickup_time<>'null'
GROUP BY 
  customer_id;
  
  
  /*
8.How many pizzas were delivered that had both exclusions and extras?

delivered,exclusions and extras
*/

SELECT
CO.order_id, 
CO.exclusions,
CO.extras,
RO.pickup_time
FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.runner_orders as RO
ON CO.order_id = RO.order_id
WHERE pickup_time <> 'null'
AND (exclusions IS NOT NULL AND exclusions <> 'null' AND length(exclusions)>0 )
AND (extras IS NOT NULL AND extras <> 'null' AND length(extras)>0);

# Final below

SELECT
count(pizza_id) as pizzas_delivered_with_exclusions_extras
FROM pizza_runner.customer_orders as CO
INNER JOIN pizza_runner.runner_orders as RO
ON CO.order_id = RO.order_id
WHERE pickup_time <> 'null'
AND (exclusions IS NOT NULL AND exclusions <> 'null' AND length(exclusions)>0 )
AND (extras IS NOT NULL AND extras <> 'null' AND length(extras)>0);

 /*
9.What was the total volume of pizzas ordered for each hour of the day?
*/

SELECT
hour(order_time) as hours,
count(pizza_id) as pizzas_ordered
FROM pizza_runner.customer_orders
GROUP BY hours;

 /*
10.What was the volume of orders for each day of the week?
*/

SELECT
dayname(order_time) as daynames,
count(pizza_id) as pizzas_ordered
FROM pizza_runner.customer_orders
GROUP BY daynames;

-----------------------------------------------------------------

/*
Section B. Runner and Customer Experience
1.How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
2.What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
3.Is there any relationship between the number of pizzas and how long the order takes to prepare?
4.What was the average distance travelled for each customer?
5.What was the difference between the longest and shortest delivery times for all orders?
6.What was the average speed for each runner for each delivery and do you notice any trend for these values?
7.What is the successful delivery percentage for each runner?
*/

SELECT * FROM pizza_runner.runners;
SELECT * FROM pizza_runner.customer_orders;
SELECT * FROM pizza_runner.runner_orders;
SELECT * FROM pizza_runner.pizza_names;
SELECT * FROM pizza_runner.pizza_recipes;
SELECT * FROM pizza_runner.pizza_toppings;

 /*
1.How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
*/

# date trunc function not support in mysql so go for snowflake or any other way

SELECT
registration_date,
week(registration_date)+4 as weeks,
count(runner_id)
FROM pizza_runner.runners
group by registration_date;

# in snowflake

SELECT
DATE_TRUNC('WEEK',registration_date) + 4 as week,
count(runner_id) as runners
FROM pizza_runner.runners
GROUP BY week;

# final below

SELECT
  DATE_FORMAT(registration_date - INTERVAL WEEKDAY(registration_date) DAY, '%Y-%m-%d') as week,
  COUNT(runner_id) as runners
FROM pizza_runner.runners
GROUP BY week;

 /*
2.What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?

runner,pickup,order
*/
  
SELECT 
#RO.pickup_time,
#CO.order_time,
runner_id,
STR_TO_DATE(RO.pickup_time, '%Y-%m-%d %H:%i:%s') AS pickup_time_casted,
#TIMESTAMPDIFF(MINUTE, CO.order_time,STR_TO_DATE(RO.pickup_time, '%Y-%m-%d %H:%i:%s')) AS minute_difference,
avg(TIMESTAMPDIFF(MINUTE, CO.order_time,STR_TO_DATE(RO.pickup_time, '%Y-%m-%d %H:%i:%s'))) AS avg_minute_difference
FROM pizza_runner.runner_orders AS RO
INNER JOIN pizza_runner.customer_orders AS CO 
ON RO.order_id = CO.order_id
WHERE RO.pickup_time IS NOT NULL
GROUP BY runner_id;

#final below

SELECT
runner_id,
avg(TIMESTAMPDIFF(MINUTE, CO.order_time,STR_TO_DATE(RO.pickup_time, '%Y-%m-%d %H:%i:%s'))) AS avg_minute_difference
FROM pizza_runner.runner_orders AS RO
INNER JOIN pizza_runner.customer_orders AS CO 
ON RO.order_id = CO.order_id
WHERE RO.pickup_time IS NOT NULL
GROUP BY runner_id;

 /*
3.Is there any relationship between the number of pizzas and how long the order takes to prepare?

number of pizzas,how long the order
*/

SELECT
CO.order_id,
count(CO.pizza_id) as number_of_pizzas,
MAX(TIMEDIFF(STR_TO_DATE(RO.pickup_time, '%Y-%m-%d %H:%i:%s'), CO.order_time)) as prep_time
FROM pizza_runner.runner_orders AS RO 
INNER JOIN pizza_runner.customer_orders AS CO
ON RO.order_id = CO.order_id
WHERE RO.pickup_time <> 'null'
GROUP BY CO.order_id;

with CTE as (
SELECT
CO.order_id,
count(CO.pizza_id) as number_of_pizzas,
MAX(TIMEDIFF(STR_TO_DATE(RO.pickup_time, '%Y-%m-%d %H:%i:%s'), CO.order_time)) as prep_time
FROM pizza_runner.runner_orders AS RO 
INNER JOIN pizza_runner.customer_orders AS CO
ON RO.order_id = CO.order_id
WHERE RO.pickup_time <> 'null'
GROUP BY CO.order_id
)
SELECT number_of_pizzas,
AVG(prep_time) as avg_prep_time
FROM CTE
GROUP BY number_of_pizzas;

 /*
4.What was the average distance travelled for each customer?

distance,customer
*/


SELECT CO.customer_id,
ROUND(AVG(CAST(replace(distance,'km','') as decimal(3,1))),1) as avg_distance
FROM pizza_runner.runner_orders AS RO 
INNER JOIN pizza_runner.customer_orders AS CO
ON RO.order_id = CO.order_id
WHERE distance <> 'null'
GROUP BY CO.customer_id;

  # OR
  
  SELECT
  CO.customer_id,
  CONVERT(REPLACE(distance, 'km', ''), DECIMAL(3,1)) + 0 AS distance
FROM
  pizza_runner.runner_orders AS RO
INNER JOIN
  pizza_runner.customer_orders AS CO ON RO.order_id = CO.order_id
WHERE
  RO.distance IS NOT NULL
  AND RO.distance <> 'null';
  
/*
5.What was the difference between the longest and shortest delivery times for all orders?

orders,longest and shortest distance,time
*/

SELECT 
MAX(CAST(REGEXP_REPLACE(duration, '[^0-9]','') AS SIGNED)) - MIN(CAST(REGEXP_REPLACE(duration, '[^0-9]', '') AS SIGNED)) AS delivery_time_difference
FROM pizza_runner.runner_orders as RO
WHERE RO.duration <> 'null';

/* 
CAST(REGEXP_REPLACE(duration, '[^0-9]', '') AS SIGNED) is used to convert the cleaned numeric string to an integer.
This is similar to the Snowflake :: int cast.
Please note that in MySQL, we use AS SIGNED instead of :: int for casting to an integer.
*/


/*
6.What was the average speed for each runner for each delivery and do you notice any trend for these values?

runner,delivery
*/
SELECT * FROM pizza_runner.runner_orders;

SELECT 
runner_id,
order_id,
CAST(REPLACE(distance,'km','') AS DECIMAL(3,1)) as distance,
CAST(REGEXP_REPLACE(duration,'[^0-9]','') AS SIGNED) as duration,
AVG(ROUND((distance / duration),2)) as avg_speed
FROM pizza_runner.runner_orders
WHERE duration <> 'null'
GROUP BY runner_id,order_id
ORDER BY runner_id,order_id;


/*
7.What is the successful delivery percentage for each runner?

delivery,runner
*/

SELECT
runner_id,
SUM(CASE
	WHEN pickup_time = 'null' THEN 0
    ELSE 1
    END) as successful_orders,
COUNT(order_id) as all_orders,
(successful_orders / all_orders) as successful_delivery_percentage    
FROM pizza_runner.runner_orders
GROUP BY runner_id;

#final below

SELECT
runner_id,
ROUND(SUM(CASE
	WHEN pickup_time = 'null' THEN 0
    ELSE 1
    END) /
COUNT(order_id),2) as successful_delivery_percentage    
FROM pizza_runner.runner_orders
GROUP BY runner_id;

--------------------------------------------------------------
/*
C. Ingredient Optimisation
1.What are the standard ingredients for each pizza?
2.What was the most commonly added extra?
3.What was the most common exclusion?
4.Generate an order item for each record in the customers_orders table in the format of one of the following:
Meat Lovers
Meat Lovers - Exclude Beef
Meat Lovers - Extra Bacon
Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
5.Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table
 and add a 2x in front of any relevant ingredients
For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
6.What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
*/

SELECT * FROM pizza_runner.runners;
SELECT * FROM pizza_runner.customer_orders;
SELECT * FROM pizza_runner.runner_orders;
SELECT * FROM pizza_runner.pizza_names;
SELECT * FROM pizza_runner.pizza_recipes;
SELECT * FROM pizza_runner.pizza_toppings;

/*
1.What are the standard ingredients for each pizza?

ingredients,pizza
*/

/*
i am ending this section c question because LEFT JOIN LATERAL SPLIT_TO_TABLE function is available in snowflake
but in mysql not support this function,at the time of mysql REGEXP function is used,i have seen this REGEXP code
but concept wise i have not clear that why i am ending this project. 
*/


SELECT
pizza_id,
S.value as topping_id,
PT.*
FROM pizza_runner.pizza_recipes
LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
INNER JOIN pizza_runner.pizza_toppings as PT
ON PT.topping_id = S.value ;


SELECT
  PR.pizza_id,
  SUBSTRING_INDEX(SUBSTRING_INDEX(PR.toppings, ',', numbers.n), ',', -1) AS topping_id,
  PT.*
FROM
  pizza_runner.pizza_recipes PR
JOIN (
  SELECT
    ones.n + 10 * tens.n + 100 * hundreds.n AS n
  FROM
    (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) ones,
    (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) tens,
    (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) hundreds
) numbers
JOIN pizza_runner.pizza_toppings PT ON PT.topping_id = SUBSTRING_INDEX(SUBSTRING_INDEX(PR.toppings, ',', numbers.n), ',', -1);


SELECT
  PR.pizza_id,
  REGEXP_SUBSTR(PR.toppings, '[^,]+', 1, numbers.n) AS topping_id,
  PT.*
FROM
  pizza_runner.pizza_recipes PR
JOIN (
  SELECT ones.n + 1 AS n
  FROM (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4) ones
) numbers
JOIN pizza_runner.pizza_toppings PT ON PT.topping_id = REGEXP_SUBSTR(PR.toppings, '[^,]+', 1, numbers.n);
